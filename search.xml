<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高第與他的城市</title>
    <url>/2024/08/29/barcelona/</url>
    <content><![CDATA[<blockquote><p>其實巴塞隆納人走路挺快的</p>
</blockquote>
<p>雖然我很喜歡旅行，但我其實真的很少特別嚮往某個特定城市，其中一個大概是京都，另一個就是巴塞隆納了。</p>
<p>當然我不是對巴塞隆納有什麼特別的期待，我其實只是來看聖家堂而已，但2026我應該會想來看她完成的樣子，然後應該會想來更多次，所以說我愛巴塞隆納也怪怪的，可能只能說是愛屋及烏而已。但巴塞隆納確實是個迷人的都市，而且其實西班牙人的心理活動滿台的，不知道有沒有人跟我有一樣的想法（？）反正我覺得巴塞隆納很親切就對了，滿街的菸蒂、充斥煙火氣的料理、有點怪但人很好的居民、不輕易停下的夜晚，這裡大概真的是我去過的大城市裡少數不反感的了，總是讓我在奇怪的地方找到親切感。</p>
<img src="/2024/08/29/barcelona/1.jpg" class="">


<p>當然看著看著還是會嫌棄一下台灣，西班牙的藝術真的太棒了，這是路邊隨機遇到的一棟建築，我很愛，但他們還有更多更多這樣的東西，美術館很多，現代的、古典的。展現出來的不見得是狹義的美，而是自由，是顯現的自我，是一個個小而美好的故事。</p>
<p>有天晚上的行程是到加泰隆尼亞音樂宮看演出，場地很漂亮，但對我來說不是重點，那天晚上演出的交響樂團，講難聽一點就是地方野雞樂團的等級，但他們完全讓我發現<del>以前認識的法國號真的都很爛</del>。好啦不開玩笑，不是我們不好，但他們所在的世界可能真的比較自由吧。</p>
<p>所以說出國看看還是不錯的，其實會在各種地方意識到自己的渺小和不足，然後更努力去追逐自己想要的。</p>
<h3 id="巴特羅之家-Casa-Batllo"><a href="#巴特羅之家-Casa-Batllo" class="headerlink" title="巴特羅之家 Casa Batlló"></a>巴特羅之家 Casa Batlló</h3><img src="/2024/08/29/barcelona/b1.jpg" class="">
<p>很美很深邃的藍，我其實沒想過最後留下最深印象的是靠近頂樓的深藍，但這抬頭一望真的讓我好難忘記它。</p>
<img src="/2024/08/29/barcelona/b2.jpg" class="">
<p>回來看照片才意識到它們真的好美，這兩根柱子就在通往陽台的門口，彷彿就是要擋住你，讓你再多看看它們有多美。</p>
<img src="/2024/08/29/barcelona/b3.jpg" class="">

<img src="/2024/08/29/barcelona/b4.jpg" class="">

<img src="/2024/08/29/barcelona/b5.jpg" class="">

<img src="/2024/08/29/barcelona/b6.jpg" class="">

<p>我後來很意外的發現，其實我對這裡主要的記憶都在那道藍色天井，奈何我實在拍不好，或是說那種藍也不是用拍的吧，只能親眼看看，然後印在腦海中。</p>
<h3 id="米拉之家-La-Pedrera"><a href="#米拉之家-La-Pedrera" class="headerlink" title="米拉之家  La Pedrera"></a>米拉之家  La Pedrera</h3><img src="/2024/08/29/barcelona/m1.jpg" class="">

<p>老問題，一抬頭又被這裡的藍色吸引了，跟巴特羅之家那種純粹而深邃的藍不同，這裡的藍更斑駁，卻也更神秘了。它似乎不斷變幻著，我也只能乖乖地一直抬頭看它。</p>
<img src="/2024/08/29/barcelona/m2.jpg" class="">

<p>可愛的巨人們。</p>
<img src="/2024/08/29/barcelona/m3.jpg" class="">

<img src="/2024/08/29/barcelona/m4.jpg" class="">

<p>其實對我來說，高第的厲害之處不僅止於顛覆建築的結構、外觀，他其實也定義了我們該怎麼好好生活。這兩棟建築裡都有數不清的巧思，是為了在裡面生活的人設計的。他真的是一個好完整的人。</p>
<img src="/2024/08/29/barcelona/m5.jpg" class="">

<p>基本上巴塞隆納沒什麼高樓，所以我到每個地方都在拍聖家堂XD</p>
<img src="/2024/08/29/barcelona/m6.jpg" class="">

<img src="/2024/08/29/barcelona/m7.jpg" class="">

<p>巴塞隆納的街頭很美，畢竟斜對面就是大師的作品，蓋起來應該挺有壓力的，這棟應該是開放空間的辦公大樓，我很喜歡，不過在台北的話應該會變成西晒地獄吧…馬路就是單純從上而下拍有種外國感（廢話）</p>
<img src="/2024/08/29/barcelona/m8.jpg" class="">

<p>再抬頭看一次，我其實覺得他不斷地在提醒我們抬頭看，所以他做了很多在每個高度不同的設計，目的就是在告訴我們，每個時間，每個空間，都該向上看看，感受一下每一道光帶給你的色彩，感受每一刻的世界，感受每一刻的美。</p>
<h3 id="奎爾公園-Parc-Guell"><a href="#奎爾公園-Parc-Guell" class="headerlink" title="奎爾公園 Parc Güell"></a>奎爾公園 Parc Güell</h3><img src="/2024/08/29/barcelona/q1.jpg" class="">

<img src="/2024/08/29/barcelona/q5.jpg" class="">

<img src="/2024/08/29/barcelona/q2.jpg" class="">

<p>毫不意外的這裡是我最沒記憶點的，主要是那天剛到天氣不太好，前半段又都在走石頭區，實在是醜醜的，但太陽出來之後還是很漂亮，只是真的太大了…但其實有點意外的是我最喜歡的磁磚其實是這裡的，可能因為完全室外的關係，陽光灑下來比起會其他地方會更耀眼一點。然後人真的太多了。</p>
<img src="/2024/08/29/barcelona/q3.jpg" class="">


<p>照慣例偷拍聖家堂，但有點遠</p>
<img src="/2024/08/29/barcelona/q4.jpg" class="">

<img src="/2024/08/29/barcelona/q6.jpg" class="">

<p>這裡我自己比較喜歡的照片反而就是拍路人為主了，因為人就真的很多，而且這裡本來就滿適合這種熱鬧感的。其實蜥蜴滿可愛的，我一直對這個吉祥物沒什麼好感，但看到本體之後，在太陽下閃閃發光其實真的滿可愛，還有<br>源源不絕的人從牠旁邊游過去，實在是滿生動的場景。</p>
<h3 id="聖家堂-Sagrada-Familia"><a href="#聖家堂-Sagrada-Familia" class="headerlink" title="聖家堂 Sagrada Família"></a>聖家堂 Sagrada Família</h3><p>其實聖家堂不是最後去的，但我想放在最後，原因不用多說，因為我就是為她來的，我們住的地方就在聖家堂附近，剛到的時候其實對距離沒有概念，所以從地鐵站一走上來，回頭看到她就在我身後，那種感覺真的一輩子沒辦法忘記，崇拜了一輩子的建築冷不防地出現在身後，眼眶直接泛淚。我就呆呆站在那裡看了好久，那天天氣也不好，但我一直覺得那一幕真的很耀眼。</p>
<img src="/2024/08/29/barcelona/s1.jpg" class="">

<p>參觀那天我看了這道灑下來的光無數次，每次進門就會被其中一個立面灑下來的光迎接，每次都是不同的感動，說真的有機會來真的要盡量待久一點，每個小時能看到的景色真的都不一樣。</p>
<img src="/2024/08/29/barcelona/s2.jpg" class="">

<p>大家都在抬頭仰望她。</p>
<img src="/2024/08/29/barcelona/s3.jpg" class="">

<img src="/2024/08/29/barcelona/s4.jpg" class="">

<p>我們是有買可以上塔參觀的行程的，不知道完工後還會不會開放這個行程，反正我總覺得要去先趁完工前，見證如此偉大的工程不管怎麼說都會是很好的回憶。</p>
<img src="/2024/08/29/barcelona/s5.jpg" class="">

<p>參觀完下來的樓梯旁甚至有大家自己丟出來的許願井XD</p>
<img src="/2024/08/29/barcelona/s6.jpg" class="">

<img src="/2024/08/29/barcelona/s7.jpg" class="">

<img src="/2024/08/29/barcelona/s8.jpg" class="">

<img src="/2024/08/29/barcelona/s12.jpg" class="">

<p>那天其實還不太熟悉我的新鏡頭，而且以我的設備能拍出來的好東西也不多，那天我媽甚至確診，所以真的沒有待很久就出來了，我記得應該是差不多四小時。但這四小時我也已經親眼見證了裡面無數次的光線、色彩變化，如果你跟我一樣是個喜歡捕捉光線的人，聖家堂真的會讓你驚嘆無比。</p>
<img src="/2024/08/29/barcelona/s9.jpg" class="">

<p>在聖家堂底下還是用鏡子偷拍她。</p>
<img src="/2024/08/29/barcelona/s10.jpg" class="">

<img src="/2024/08/29/barcelona/s11.jpg" class="">

<p>拍到很多可愛的鴿子。</p>
<hr>
<img src="/2024/08/29/barcelona/2.jpg" class="">

<p>還是想記錄一下這一餐，其實說真的食材跟國家、地區的的關聯沒有好壞之分啦，只是到了每個地方都要體驗一下當地的食材，大家都有自己的優勢劣勢。因為我不會煮西班牙菜，所以比較像是體驗歐洲食物，這裡讓我印象深刻的食材是：菇、雞肉跟義大利麵。</p>
<p>義大利麵不用說啦，隔壁就是義大利，主要是超市有賣生麵條，真的跟平常吃的那種乾麵條天差地別，等我有自己的冰箱我真的要開始自己做麵條了。</p>
<p>菇類算是非常驚豔，真的香到爆炸，但主要還是品種跟氣候差異啦，亞洲香菇就適合做亞洲菜，沒辦法。</p>
<p>雞肉的話可能算是驚喜？在超市看到覺得看起來很好吃就買回來煮了，結果真的很好吃，算是沒有料到的意外收穫。</p>
<p>其他東西就，馬鈴薯好吃，生火腿好吃而且便宜，無花果好吃，優格我爸一直買。很多東西都好吃，但我覺得看個人口味啦，我是全部都能接受，但我一直以為我媽算是對歐美食物接受度非常高了，結果有個冷的薄薄類似鹹派的東西，全家只有我吃得下去，而且我覺得滿好吃的。基本上西班牙口味我是覺得某些微妙的部分真的很像台灣啦，然後料理手法普遍來說都很好，價格應該也算歐洲便宜的了，很不錯。</p>
<hr>
<p>雖然我不懂建築，但其實很多東西我也不懂，更多時候我們還是需要用感受的，去感受這樣做的原因，感受他所要傳達的，並用你所能理解的方式感受。比方說我用光來感受他的建築，你也能用任何方式感受任何事物，只要真正用心感受，我想都是能夠互相理解的。</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo基本操作分享</title>
    <url>/2024/08/29/hexobasic/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">參考文章</a></p>
</blockquote>
<p>看到Hexo一陣子了，我一直都想自己架個站，但都懶得動，這次實習完終於喚醒我長年睡著的Coding魂（其實也是終於有機會跟上新時代的工具了），剛好也有時間就來搞搞看，結果發現其實真的滿簡單的，也滿好用。</p>
<h1 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h1><hr>
<p>開玩笑的，我最不會解釋這種東西了，基本上就是個寫網誌的框架啦！</p>
<blockquote>
<p><a href="https://hexo.io/zh-tw/">官網連結</a></p>
</blockquote>
<p>其實官網就有完整（？）教學了，架起來真的很簡單，我第一次用遇到的問題比較都是不熟悉現代工具（node.js, git）造成的，每個人應該都有不太會打Terminal的時代吧…還是單純我笨QQ</p>
<h1 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h1><hr>
<p>反正官網其實開頭就告訴你需要什麼指令了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>好吧，既然我的初衷是要手把手教學，這裡就講仔細點，順便讓我練一下Markdown。</p>
<p>首先最基礎的是，看到 <code>npm</code> 的時候就要有意識了，基本上這個時代寫程式最容易看到卻也最容易讓小白卡住的兩個詞就是 <code>npm</code> 或 <code>pip</code> 。簡單來說他們有點像兩種下載器， <code>npm</code> 是node.js預設的，<code>pip</code> 則是Python預設的，你的電腦要先裝好對應的環境，才可以在Terminal上使用這些指令。</p>
<blockquote>
<p><a href="https://nodejs.org/zh-tw">node.js官網</a></p>
</blockquote>
<p>因此這裡第一件要做的事就是把node裝好，裝好之後大概就會產生下一個疑問了：</p>
<h3 id="我要在哪裏打剛剛的指令…"><a href="#我要在哪裏打剛剛的指令…" class="headerlink" title="我要在哪裏打剛剛的指令…"></a>我要在哪裏打剛剛的指令…</h3><p>剛剛有提過Terminal了，我一直覺得這東西的存在就是為了阻止程式小白開始寫程式，因為真的太基本了所以基本上沒什麼人會教…至於我為什麼一直覺得這是新世代的方法，主要是因為以前就是學一些上古時代的東西，包括但不限於C++, PHP, JAVA等語言，又因為都在學校學，真的是比較少碰現在這些框架，甚至是比較大的框架大部分不一定需要用這種Package的方式安裝（其實我直覺也舉不出例子，但還真就剛好沒人教過我怎麼用npm），於是後來我就一直對這個很困惑（說白了就是懶的接觸新東西啦）。</p>
<p>最近又回來比較密集的碰這些東西才重新理解，那就來詳細說一下我理解的內容吧，簡單來說Terminal其實就是電腦上可以輸入指令的地方，以Windows來說比較常用的就是<strong>cmd（Command Line, 命令提示字元）</strong>，在開始輸入cmd就會直接跳出來；另外還有<strong>PowerShell</strong>，基本上把他當強化版的cmd就對了，功能比cmd完整，但整體使用上差不多。</p>
<p>不過我自己現在最常用的是<a href="https://code.visualstudio.com/"><strong>VS Code（Visual Studio Code）</strong></a>內建的Terminal啦，高中有在寫程式的時候大家對VS Code的評價好像都不是很好，我記得那時候還很多人是用Sublime Text去裝C++插件來寫。但時代變了，現在整個生態系越來越完整，VS Code變好用很多（其實我好像一直都沒覺得它難用就是了），重點是我覺得變漂亮很多，畢竟寫Code整天只能盯著這個畫面，好看還是很重要的。</p>
<p>回到重點，大部分的IDE（Integrated Development Environment, 整合開發環境）其實應該都有內建的Termanal，畢竟現在的框架很多都需要指令來配合使用，打一打還要切出去挺麻煩的，這時候內建的Terminal就很方便，加上VS Code本身就是微軟開發的，在Windows環境的支援性應該還是比較好（我也沒有比較過就是了）。</p>
<p>至於用Mac的朋友我只能說聲抱歉，我真的沒有用過，這就要靠你們自己摸索了。</p>
<p>另一個要安裝的環境則是<a href="https://git-scm.com/"><strong>git</strong></a>，雖然對於Hexo來說不是必要的，但是如果要發佈到Github Page或是安裝插件都會用到，所以如果電腦裡還沒有也可以先裝起來。</p>
<p>再回到剛剛的指令，我們一行一行來看好了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>首先又有一個大重點，我覺得這也是要阻止外行人學程式的陰謀…可以看到一開始有個 <code>$</code> 符號，基本上我相信99%的人第一次看到就會整行複製，然後Windows就會吐一句話給你：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;$&#x27;</span> 不是內部或外部命令、可執行的程式或批次檔。</span><br></pre></td></tr></table></figure>
<p>是的，其實很簡單的問題，那個 <code>$</code> 不是要你複製貼上的，以我目前的理解，它比較像是在告訴你這行是一個指令，可以打在Terminal上執行，不過實際上好像會因為作業系統而不同（這部分我是問ChatGPT，我也不確定，手邊有Linux系統的可以自己試試看），反正Linux&#x2F;Unix中輸入的話， <code>$</code> 應該是可打可不打，但Windows是直接不收，所以如果是純粹針對Windows的教學其實有些就會不加 <code>$</code> ，例如這樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>不過我還是必須說，我覺得指令滿多時候會因為每台電腦環境、版本的些微不同而出一些奇怪的Bug，所以遇到問題還是要多google，基本上能過最重要，不用因為自己的指令跟別人不同感到難過（？），我其實不太確定這是什麼問題就是了，但我印象中確實有遇過這樣的情況，很怪。</p>
<p>那這個指令就是安裝啦，<code>install</code> 應該都看得懂吧，執行完就會在你所在的目錄安裝好Hexo啦，其實釐清這個邏輯以後就會發現這很方便，反正指令google就有，也不太需要記。</p>
<p>那下一個指令就是Hexo自己的指令了，這邊做的是初始化Hexo，執行後會在所在的目錄建立一個資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder name&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;folder name&gt;</code> 記得改成自己要的名稱，也可以先建好資料夾並在該資料夾輸入上面的指令，同樣可以完成初始化。</p>
<p>下個指令很重要，很常用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder name&gt;</span><br></pre></td></tr></table></figure>
<p><code>cd</code> 是個很常用的指令，基本上就是 <code>change directory</code> 的意思，也就是把執行指令的目錄變更到目標目錄去，對，這裡補充一下，基本上執行指令的對象都是對某個目錄，所以以這邊的情境來說，就是我剛建立了一個新的資料夾，現在我要對這個資料夾做一些變更或執行一些東西，所以我要把執行的目錄變更為新的資料夾。上一步如果要先建立資料夾，就是建立好之後 <code>cd</code> 到新的資料夾裡面，所以其實兩個做法真的是差不多的意思啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其實也可以打開資料夾之後在檔案總管的路徑那邊直接輸入cmd，跟 <code>cd</code> 指令是一樣的意思。</p>
</blockquote>
<p>這邊就是在新資料夾把需要的Package重新安裝一次，沒問題的話會看到這些檔案跟資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>基本上這邊就差不多了，輸入最後一個指令就可以在本地端發布靜態網頁，可以看到網頁的最初模樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>就可以點Terminal上的<a href="http://localhost:4000/">連結</a>來看到自己發布的網頁了。</p>
<h1 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置"></a>基本設置</h1><hr>
<p>如果你照著上面的步驟走完一遍，應該會發現我的網頁跟你的長不一樣吧！其實Hexo官網上提供了很多的<a href="https://hexo.io/themes/">主題（Themes）</a>，可以去挑自己喜歡的來用，我目前用的這個是<a href="https://github.com/zoeingwingkei/frame/tree/master">Frame</a>，其實算是歪打正著找到一個滿漂亮功能又滿多的，大家也可以自己探索，基本上官網都有Demo網頁（不過有些網域沒有維護被連結到其他地方去了，請大家瀏覽的時候自行注意安全），可以慢慢尋找自己最喜歡的主題，因為每個主題的設置會不太一樣，所以如果是用了一陣子之後才換可能會稍微有點麻煩，大家就自己研究看看囉！</p>
<p>那這裡先從Hexo的基本設置開始說起，不過我不會講太仔細，網路上有很多教學講得很詳細，這部分我也還沒研究清楚就不班門弄斧了。</p>
<p>這邊指的基本設置是在剛剛建立的新資料夾中，有一個 <code>_config.yml</code> 的檔案，可以用記事本打開或是直接拉到VS Code裡開啟，打開之後可以看到滿多設定可以更改，這裡講幾個比較基本的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Roy&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;我的網路與程式開發筆記&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Roy</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>應該算容易理解，<code>title</code> 就是網站標題，也就是顯示在分頁上的字，<code>description</code> 則是對網頁的描述，通常是給搜尋引擎看的啦，以下這幾個差不多都是這個意思，看個人需要再編輯即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br></pre></td></tr></table></figure>
<p>這邊比較重要，這邊是決定產生的靜態檔案會跑去哪，也會決定它們的相對路徑，所以如果有找不到頁面的情況，可能是其他地方的設定跟這裡不同造成的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">frame</span></span><br></pre></td></tr></table></figure>
<p>這裡則是設置使用的主題，上面還很貼心的提供了官網連結，可以瀏覽所有的主題以及插件，之後 <code>git clone</code> 到對應的資料夾使用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;Your</span> <span class="string">Github</span> <span class="string">Page</span> <span class="string">Link&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>另外先提一下，如果有要發佈到Github Page上，需要在這裡先設定自己的Github Repository連結，才可以順利發佈上去，這個我之後會再詳細講一遍，我們先看看其他設定吧。</p>
<hr>
<p>接下來講講<strong>主題</strong>相關的設置吧，基本上每個主題的設置都會不太一樣，所以我講比較通用的概念為主，先講個先備知識，如果你不太了解相對路徑如何運作，請先去google複習一下，我就不贅述了。</p>
<p>主題的設置會在 <code>themes</code> 資料夾裡，該主題的資料夾中會有另一個 <code>_config.yml</code> 檔案，一樣開啟它之後就會看到該主題對應的設置，基本上每個主題Github上的 <code>README.md</code> 會有自己的說明，都講得滿清楚的。</p>
<p>先岔開一下好了，對於比較少用這種類型框架的人來說可能會遇到跟我一樣的問題，或著單純我傻QQ，在我以前的認知裡，尤其對於靜態網頁，我直覺就是找 <code>public</code> 資料夾，因為通常就是這樣叫的嘛，所以我就拿裡面的東西改改改，然後照著教學打指令之後就發現我改的東西不見了…</p>
<p>其實仔細想想真的滿笨的。因為Hexo是靜態的網頁框架，所以每次更改之後都要重新產生靜態網頁，需要輸入以下兩個指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo cl</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>就是把原本的靜態網頁刪除，然後產生新的，就這麼簡單而已，但相對來說在 <code>public</code>裡面改的東西就會消失，<strong>所以不論改什麼，都不要在 <code>public</code> 資料夾底下改</strong>，除非你確定你再也不會用Hexo本身的功能生成靜態網頁，否則改任何圖示都要在 <code>/themes/source</code> 底下去改檔案，如果要改網頁的Layout則是要到 <code>themes/layout</code> 底下去改 <code>.ejs</code> 檔， <code>.ejs</code> 的具體操作我就不明白了，大家有興趣可以自行研究。然後再用 <code>$ hexo g</code> 根據 <code>themes</code> 裡面的檔案去生成靜態網頁，這時候才會用裡面的圖檔、文件去生成新的靜態網頁到 <code>public</code> 裡面。</p>
<p>所以說這邊比較通用且好更改的東西就是網頁上顯示的圖示了，第一個是 <code>favicon.ico</code> ，可以在 <code>/themes/source</code> 裡面找到它，它就是我們平常在分頁標籤最左邊可以看到的那個圖示。想要自己動手做的話可以到<a href="https://favicon.io/"><strong>favicon.io</strong></a>，或是用<a href="https://www.figma.com/"><strong>figma</strong></a>輸出 <code>.png</code> 檔再轉成 <code>.ico</code> 檔，之後丟到 <code>/themes/source</code> 就可以了。</p>
<p>網頁內的Icon也是用一樣的方式操作，我比較建議的方式也是用Figma輸出 <code>.png</code> 檔，Figma真的很推，簡單好用漂亮，但如果你有其他用得順手的工具當然也OK。</p>
<p>另外再介紹一個好用的插件，<a href="https://github.com/next-theme/hexo-generator-searchdb"><strong>hexo-generator-searchdb</strong></a>是一款本地搜尋插件，我不確定它能不能跟其他主題完全相容，但Frame有<a href="https://zoeingwingkei.github.io/frame-demo-site/2022/08/05/local-search/">完整支援</a>，非常簡單就能設置完成，我覺得我還是滿需要搜尋功能的，不然寫多了都不記得自己寫過啥XD</p>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;layout&gt; &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>這邊就是建立新的頁面，Layout可選的有三種：</p>
<table>
<thead>
<tr>
<th align="left">Layout</th>
<th align="left">path</th>
<th align="left">defnition</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>post</code></td>
<td align="left"><code>source/_post</code></td>
<td align="left">文章</td>
</tr>
<tr>
<td align="left"><code>page</code></td>
<td align="left"><code>source</code></td>
<td align="left">頁面</td>
</tr>
<tr>
<td align="left"><code>draft</code></td>
<td align="left"><code>source/_drafts</code></td>
<td align="left">草稿</td>
</tr>
</tbody></table>
<p>基本上 <code>post</code> 跟 <code>draft</code> 是差不多的東西，單純就是產生在不同的目錄底下而已； <code>page</code> 就比較不一樣，它是直接建立一個頁面，就有很多可以玩的了，我暫時還沒研究。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>清除快取與已產生的靜態檔案，建議每次儲存修改完的檔案都可以先執行這個。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>就是生成靜態檔案，所以先用 <code>clean</code> 清除再重新生成一次，就這樣。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>這個剛剛有講過了，在本地端啟動Hexo server，就可以在自己電腦上預覽結果，要關掉的話回到Terminal點一下之後按 <code>Ctrl+C</code> 就可以了。</p>
<h1 id="發佈到Github-Page"><a href="#發佈到Github-Page" class="headerlink" title="發佈到Github Page"></a>發佈到Github Page</h1><hr>
<p>這邊…真的滿簡單的，所以我就不多寫了，可以參考其他人的文章，以下附上兩篇：</p>
<blockquote>
<p><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">Github Page</a></p>
</blockquote>
<blockquote>
<p><a href="https://medium.com/i-caught-a-code/hexo-%E7%84%A1%E7%97%9B%E5%85%A5%E5%9D%91%E5%9B%89-1a119a6805e5">Gitlab + Netlify</a></p>
</blockquote>
<p>設定好之後就是在每次修改完依序執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo cl</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>這三行指令就是前面 <code>clean</code> 跟 <code>generate</code> 的縮寫，再加上一個 <code>deploy</code> 。</p>
<p>基本上這樣就可以開始玩啦！底下再附上幾個連結給大家參考：</p>
<p>Markdown語法相關：</p>
<blockquote>
<p><a href="https://kingofamani.gitbooks.io/git-teach/content/chapter_6_gitbook/markdown.html">MD語法教學</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/zh-tw/docs/tag-plugins">Hexo提供的Tag Plugins</a></p>
</blockquote>
<p>要注意的是Tag Plugins雖然用起來滿方便的，但在VS Code預覽時不會正常顯示，算是小麻煩的點。</p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><hr>
<p>其實我也才剛開始玩Hexo而已，這篇主要就是一些基本介紹，如果之後有玩出其他東西再來跟大家分享。Hexo真的算是滿簡單好用，滿推薦大家自己弄起來玩玩看的，而且因為是自己架的，相對來說在上面寫東西負擔也比較小，算是慢慢建立個人網站的起步好幫手。那如果有摸出新東西再來跟大家分享啦，之後幾篇應該會先寫原本預計寫的東西，過一陣子再回來研究Hexo，就這樣囉！</p>
]]></content>
      <categories>
        <category>articles</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tag/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
