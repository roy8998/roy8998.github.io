<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高第與他的城市</title>
    <url>/2024/08/29/barcelona/</url>
    <content><![CDATA[<blockquote><p>其實巴塞隆納人走路挺快的</p>
</blockquote>
<p>雖然我很喜歡旅行，但我其實真的很少特別嚮往某個特定城市，其中一個大概是京都，另一個就是巴塞隆納了。</p>
<p>當然我不是對巴塞隆納有什麼特別的期待，我其實只是來看聖家堂而已，但2026我應該會想來看她完成的樣子，然後應該會想來更多次，所以說我愛巴塞隆納也怪怪的，可能只能說是愛屋及烏而已。但巴塞隆納確實是個迷人的都市，而且其實西班牙人的心理活動滿台的，不知道有沒有人跟我有一樣的想法（？）反正我覺得巴塞隆納很親切就對了，滿街的菸蒂、充斥煙火氣的料理、有點怪但人很好的居民、不輕易停下的夜晚，這裡大概真的是我去過的大城市裡少數不反感的了，總是讓我在奇怪的地方找到親切感。</p>
<img src="/2024/08/29/barcelona/1.jpg" class="">


<p>當然看著看著還是會嫌棄一下台灣，西班牙的藝術真的太棒了，這是路邊隨機遇到的一棟建築，我很愛，但他們還有更多更多這樣的東西，美術館很多，現代的、古典的。展現出來的不見得是狹義的美，而是自由，是顯現的自我，是一個個小而美好的故事。</p>
<p>有天晚上的行程是到加泰隆尼亞音樂宮看演出，場地很漂亮，但對我來說不是重點，那天晚上演出的交響樂團，講難聽一點就是地方野雞樂團的等級，但他們完全讓我發現<del>以前認識的法國號真的都很爛</del>。好啦不開玩笑，不是我們不好，但他們所在的世界可能真的比較自由吧。</p>
<p>所以說出國看看還是不錯的，其實會在各種地方意識到自己的渺小和不足，然後更努力去追逐自己想要的。</p>
<h3 id="巴特羅之家-Casa-Batllo"><a href="#巴特羅之家-Casa-Batllo" class="headerlink" title="巴特羅之家 Casa Batlló"></a>巴特羅之家 Casa Batlló</h3><img src="/2024/08/29/barcelona/b1.jpg" class="">
<p>很美很深邃的藍，我其實沒想過最後留下最深印象的是靠近頂樓的深藍，但這抬頭一望真的讓我好難忘記它。</p>
<img src="/2024/08/29/barcelona/b2.jpg" class="">
<p>回來看照片才意識到它們真的好美，這兩根柱子就在通往陽台的門口，彷彿就是要擋住你，讓你再多看看它們有多美。</p>
<img src="/2024/08/29/barcelona/b3.jpg" class="">

<img src="/2024/08/29/barcelona/b4.jpg" class="">

<img src="/2024/08/29/barcelona/b5.jpg" class="">

<img src="/2024/08/29/barcelona/b6.jpg" class="">

<p>我後來很意外的發現，其實我對這裡主要的記憶都在那道藍色天井，奈何我實在拍不好，或是說那種藍也不是用拍的吧，只能親眼看看，然後印在腦海中。</p>
<h3 id="米拉之家-La-Pedrera"><a href="#米拉之家-La-Pedrera" class="headerlink" title="米拉之家  La Pedrera"></a>米拉之家  La Pedrera</h3><img src="/2024/08/29/barcelona/m1.jpg" class="">

<p>老問題，一抬頭又被這裡的藍色吸引了，跟巴特羅之家那種純粹而深邃的藍不同，這裡的藍更斑駁，卻也更神秘了。它似乎不斷變幻著，我也只能乖乖地一直抬頭看它。</p>
<img src="/2024/08/29/barcelona/m2.jpg" class="">

<p>可愛的巨人們。</p>
<img src="/2024/08/29/barcelona/m3.jpg" class="">

<img src="/2024/08/29/barcelona/m4.jpg" class="">

<p>其實對我來說，高第的厲害之處不僅止於顛覆建築的結構、外觀，他其實也定義了我們該怎麼好好生活。這兩棟建築裡都有數不清的巧思，是為了在裡面生活的人設計的。他真的是一個好完整的人。</p>
<img src="/2024/08/29/barcelona/m5.jpg" class="">

<p>基本上巴塞隆納沒什麼高樓，所以我到每個地方都在拍聖家堂XD</p>
<img src="/2024/08/29/barcelona/m6.jpg" class="">

<img src="/2024/08/29/barcelona/m7.jpg" class="">

<p>巴塞隆納的街頭很美，畢竟斜對面就是大師的作品，蓋起來應該挺有壓力的，這棟應該是開放空間的辦公大樓，我很喜歡，不過在台北的話應該會變成西晒地獄吧…馬路就是單純從上而下拍有種外國感（廢話）</p>
<img src="/2024/08/29/barcelona/m8.jpg" class="">

<p>再抬頭看一次，我其實覺得他不斷地在提醒我們抬頭看，所以他做了很多在每個高度不同的設計，目的就是在告訴我們，每個時間，每個空間，都該向上看看，感受一下每一道光帶給你的色彩，感受每一刻的世界，感受每一刻的美。</p>
<h3 id="奎爾公園-Parc-Guell"><a href="#奎爾公園-Parc-Guell" class="headerlink" title="奎爾公園 Parc Güell"></a>奎爾公園 Parc Güell</h3><img src="/2024/08/29/barcelona/q1.jpg" class="">

<img src="/2024/08/29/barcelona/q5.jpg" class="">

<img src="/2024/08/29/barcelona/q2.jpg" class="">

<p>毫不意外的這裡是我最沒記憶點的，主要是那天剛到天氣不太好，前半段又都在走石頭區，實在是醜醜的，但太陽出來之後還是很漂亮，只是真的太大了…但其實有點意外的是我最喜歡的磁磚其實是這裡的，可能因為完全室外的關係，陽光灑下來比起會其他地方會更耀眼一點。然後人真的太多了。</p>
<img src="/2024/08/29/barcelona/q3.jpg" class="">


<p>照慣例偷拍聖家堂，但有點遠。</p>
<img src="/2024/08/29/barcelona/q4.jpg" class="">

<img src="/2024/08/29/barcelona/q6.jpg" class="">

<p>這裡我自己比較喜歡的照片反而就是拍路人為主了，因為人就真的很多，而且這裡本來就滿適合這種熱鬧感的。其實蜥蜴滿可愛的，我一直對這個吉祥物沒什麼好感，但看到本體之後，在太陽下閃閃發光其實真的滿可愛，還有源源不絕的人從牠旁邊游過去，實在是滿生動的場景。</p>
<h3 id="聖家堂-Sagrada-Familia"><a href="#聖家堂-Sagrada-Familia" class="headerlink" title="聖家堂 Sagrada Família"></a>聖家堂 Sagrada Família</h3><p>其實聖家堂不是最後去的，但我想放在最後，原因不用多說，因為我就是為她來的，我們住的地方就在聖家堂附近，剛到的時候其實對距離沒有概念，所以從地鐵站一走上來，回頭看到她就在我身後，那種感覺真的一輩子沒辦法忘記，崇拜了一輩子的建築冷不防地出現在身後，眼眶直接泛淚。我就呆呆站在那裡看了好久，那天天氣也不好，但我一直覺得那一幕真的很耀眼。</p>
<img src="/2024/08/29/barcelona/s1.jpg" class="">

<p>參觀那天我看了這道灑下來的光無數次，每次進門就會被其中一個立面灑下來的光迎接，每次都是不同的感動，說真的有機會來真的要盡量待久一點，每個小時能看到的景色真的都不一樣。</p>
<img src="/2024/08/29/barcelona/s2.jpg" class="">

<p>大家都在抬頭仰望她。</p>
<img src="/2024/08/29/barcelona/s3.jpg" class="">

<img src="/2024/08/29/barcelona/s4.jpg" class="">

<p>我們是有買可以上塔參觀的行程的，不知道完工後還會不會開放這個行程，反正我總覺得要去先趁完工前，見證如此偉大的工程不管怎麼說都會是很好的回憶。</p>
<img src="/2024/08/29/barcelona/s5.jpg" class="">

<p>參觀完下來的樓梯旁甚至有大家自己丟出來的許願井XD</p>
<img src="/2024/08/29/barcelona/s6.jpg" class="">

<img src="/2024/08/29/barcelona/s7.jpg" class="">

<img src="/2024/08/29/barcelona/s8.jpg" class="">

<img src="/2024/08/29/barcelona/s12.jpg" class="">

<p>那天其實還不太熟悉我的新鏡頭，而且以我的設備能拍出來的好東西也不多，那天我媽甚至確診，所以真的沒有待很久就出來了，我記得應該是差不多四小時。但這四小時我也已經親眼見證了裡面無數次的光線、色彩變化，如果你跟我一樣是個喜歡捕捉光線的人，聖家堂真的會讓你驚嘆無比。</p>
<img src="/2024/08/29/barcelona/s9.jpg" class="">

<p>在聖家堂底下還是用鏡子偷拍她。</p>
<img src="/2024/08/29/barcelona/s10.jpg" class="">

<img src="/2024/08/29/barcelona/s11.jpg" class="">

<p>拍到很多可愛的鴿子。</p>
<hr>
<img src="/2024/08/29/barcelona/2.jpg" class="">

<p>還是想記錄一下這一餐，其實說真的食材跟國家、地區的的關聯沒有好壞之分啦，只是到了每個地方都要體驗一下當地的食材，大家都有自己的優勢劣勢。因為我不會煮西班牙菜，所以比較像是體驗歐洲食物，這裡讓我印象深刻的食材是：菇、雞肉跟義大利麵。</p>
<p>義大利麵不用說啦，隔壁就是義大利，主要是超市有賣生麵條，真的跟平常吃的那種乾麵條天差地別，等我有自己的冰箱我真的要開始自己做麵條了。</p>
<p>菇類算是非常驚豔，真的香到爆炸，但主要還是品種跟氣候差異啦，亞洲香菇就適合做亞洲菜，沒辦法。</p>
<p>雞肉的話可能算是驚喜？在超市看到覺得看起來很好吃就買回來煮了，結果真的很好吃，算是沒有料到的意外收穫。</p>
<p>其他東西就，馬鈴薯好吃，生火腿好吃而且便宜，無花果好吃，優格我爸一直買。很多東西都好吃，但我覺得看個人口味啦，我是全部都能接受，但我一直以為我媽算是對歐美食物接受度非常高了，結果有個冷的薄薄類似鹹派的東西，全家只有我吃得下去，而且我覺得滿好吃的。基本上西班牙口味我是覺得某些微妙的部分真的很像台灣啦，然後料理手法普遍來說都很好，價格應該也算歐洲便宜的了，很不錯。</p>
<hr>
<p>雖然我不懂建築，但其實很多東西我也不懂，更多時候我們還是需要用感受的，去感受這樣做的原因，感受他所要傳達的，並用你所能理解的方式感受。比方說我用光來感受他的建築，你也能用任何方式感受任何事物，只要真正用心感受，我想都是能夠互相理解的。</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
  </entry>
  <entry>
    <title>文組生的資訊素養：第一課　數位的世界</title>
    <url>/2024/08/31/l1-1/</url>
    <content><![CDATA[<p>最近有一本書滿有名的，劉潤的《底層邏輯》，雖然我還沒讀啦，但大致上應該是在講每件事都有一個最底層的邏輯，理解之後才能真正學會該怎麼做。他那本主要是在講商業跟人際方面，我就在想，好像其實沒有人在整理資訊的底層邏輯欸，主要是玩資訊的人都很宅嗎，大家都會有自己的辦法去找到東西來學，而且鑽研的很深。但是隔行如隔山嘛，前端的不懂後端在想什麼，硬體的不懂軟體在想什麼。最根本來說，大部分的文組就沒搞懂過資訊圈到底都在玩什麼，所以我就想來分享我知道的東西。剛好高中在社團教過，算是有點教人的基礎，所以應該還行吧，希望我能寫到大家都看懂。</p>
<p>不過我畢竟也不是專業的，專業的應該也不會想講這麼雜就是了，反正很多東西我沒辦法真的講到很細，主要也就是讓大家有基本的理解，如果真的藉由我的文章產生興趣之後再深入研究是最好的，也算達成了我的目的。</p>
<h1 id="數位訊號？"><a href="#數位訊號？" class="headerlink" title="數位訊號？"></a>數位訊號？</h1><hr>
<p>那就開始吧，第一課就先來聊聊電腦最最最基礎的概念之一，<strong>數位訊號</strong>，而跟數位訊號相對的是類比訊號。簡單來說，我們在日常生活中可以直接用感官理解的基本上都是廣義的類比訊號，最重要的例子就是聲音跟光，其他還有溫度、距離、氣味、頻率等等，基本上只要有連續值就是類比訊號。</p>
<p>好像需要稍微註釋一下訊號：</p>
<blockquote><p>在通訊系統、訊號處理或者電子工程等技術領域中，訊號是「傳遞有關一些現象的行為或屬性的資訊的函數。」在現實世界中，任何隨時間或者空間變化的量（如影像）都是潛在的訊號，它們可能會提供一個物理系統的狀態資訊，或在不同觀察者之間傳達消息等。</p>
<footer><strong>Wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E5%8F%B7_(%E4%BF%A1%E6%81%AF%E8%AE%BA)">訊號（資訊理論）</a></cite></footer></blockquote>
<p>所以用前面這些定義大致總結，類比訊號是連續值，代表有不同強度之分，可以直接用感官理解（摸得到看得到聽得到聞得到嘗得到）的這些東西基本上可以全部統稱類比訊號。傳統上真的會使用類比訊號傳輸的東西像是傳統的電話、收音機、類比電視這些東西，因為最終都是要呈現給人看、聽的，所以用類比訊號傳輸很合理。</p>
<p>但是看到這裡應該會產生一個疑問，那為什麼不就一直用類比訊號傳輸就好呢？</p>
<p>其實答案也很簡單，剛有提到類比訊號最主要就是在表示強度跟一些特徵，那其實這樣的訊號在傳輸過程中就容易受到干擾，而且受干擾的類比訊號就會失真，也就是讓其中的某些特徵變得不明顯。所以用類比電視或收音機的時候才會常常有雜訊，主要就是因為訊號被干擾了。</p>
<p>那講回到數位訊號，數位訊號的所有特色基本上就跟類比訊號相反啦，人類無法直接理解、不連續、強度只有高跟低兩種。所以數位訊號就是專門用來給電腦理解的，因為它便於傳輸，所以我們可以將任何形式的資料、訊號轉換成數位的形式來傳輸，再利用電腦、手機等設備把接收到的數位訊號轉換成我們看得懂的形式，也就是類比訊號，這樣聽起來很方便吧！</p>
<h1 id="數位訊號！"><a href="#數位訊號！" class="headerlink" title="數位訊號！"></a>數位訊號！</h1><hr>
<p>了解它們之間的差異之後，我們把焦點拉回到數位訊號上吧。為什麼說數位訊號我們無法直接理解呢？簡單來說它可能長這樣…</p>
<blockquote>
<p><code>110100101110101001010010111101010010111</code></p>
</blockquote>
<p>好吧這單純是我亂敲的一段數字XD，但數位訊號確實是長這個樣子，因為是給電腦看的，所以講白了就是電啦。可以簡單理解成有電跟沒電，雖然應該並不是這麼單純，而是分成高電位（<code>1</code>）跟低電位（<code>0</code>），但多高多低其實好像不一定有一個明確的定義，所以就簡單理解成有電沒電也ok。</p>
<p>所以說電腦裡運算的訊號，其實大致上一連串高低電位的組合，經由裡面的邏輯電路進行運算之後，再處理成訊號傳輸到螢幕上，最後才變成我們看到的數字或畫面（聽起來省略了很多吧，希望未來慢慢補上…）。</p>
<p>而以高低電位來表示數位訊號的方式，在電腦裡不僅方便計算，也利於儲存跟傳輸，還有更多更多基於硬體我講不太出來的理由，反正數位訊號很方便。那這樣每個 <code>1</code> 或每個 <code>0</code> 在電腦中就是一個<strong>位元（bit）</strong>，每個位元也只會有這兩種狀態，<code>1</code> 或 <code>0</code>，有或沒有，是或不是，你怎麼理解它其實都行。</p>
<table>
<thead>
<tr>
<th align="center">類比訊號</th>
<th align="center">數位訊號</th>
</tr>
</thead>
<tbody><tr>
<td align="center">例如聲音</td>
<td align="center"><code>10111010</code></td>
</tr>
<tr>
<td align="center">音量（震幅）<br>音色（波形）<br>音高（頻率）</td>
<td align="center">只有 <code>1</code> 跟 <code>0</code> 兩種狀態</td>
</tr>
<tr>
<td align="center">連續<br>例如音量<br>可以有35.8dB、107.6dB、45dB等值</td>
<td align="center">不連續<br>只有 <code>1</code> 跟 <code>0</code> 兩種狀態<br>不會有 <code>0.5</code> 、<code>0.74</code>等狀態</td>
</tr>
</tbody></table>
<blockquote>
<p>延伸閱讀：<a href="https://scitechvista.nat.gov.tw/Article/c000003/detail?ID=f059f6ab-a1be-4684-a1e8-b2d3ff72eed3">不只有0跟1的位元</a></p>
</blockquote>
<h1 id="二進制-Binary"><a href="#二進制-Binary" class="headerlink" title="二進制 Binary"></a>二進制 Binary</h1><hr>
<p>那看到這裡，應該會想理解一下數位訊號是怎麼變成我們看到的東西的吧，那就要來介紹<strong>二進制</strong>啦。我猜大多數人應該還是或多或少聽過看過二進制啦，不過我還是以我的方式從頭開始講一次，會的還是可以看一下，<strong>我有準備小遊戲</strong>！</p>
<p>先從平常的十進位制開始，平常我們看到一個數字大概是這個情況：</p>
<blockquote>
<p>2405 &#x3D; 2000 + 400 + 0 + 5<br>&ensp;&ensp;&ensp;&ensp;&ensp;&nbsp;&#x3D; 2 × 1000 + 4 × 100 + 0 × 10 + 5 × 1<br>&ensp;&ensp;&ensp;&ensp;&ensp;&nbsp;&#x3D; 2 × 10<sup>3</sup> + 4 × 10<sup>2</sup> + 0 × 10<sup>1</sup>+ 5 × 10<sup>0</sup></p>
</blockquote>
<p>也就是說，在十進位制當中，第n位數代表的意涵就是那個數字乘上10的n-1次方所代表的數值，並且整個數就是把所有位數代表的數值全部加起來的總合。</p>
<p>也就是說，十進位制是數到十就會進位一次的方式，那二進制或二進位制就是數到2就會進位一次，因此只會看到 <code>1</code> 跟 <code>0</code> 兩種數字。</p>
<p>那我們就可以用同樣的方式來思考二進位制，例如：</p>
<blockquote>
<p>1011<sub>2</sub> &#x3D; 1 × 2<sup>3</sup> + 0 × 2<sup>2</sup> + 1 × 2<sup>1</sup> + 1 × 2<sup>0</sup><br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&#x3D; 1 × 8 + 0 × 4 + 1 × 2 + 1 × 1<br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&#x3D; 11<sub>10</sub></p>
</blockquote>
<p>首先應該有發現<sub>2</sub>跟<sub>10</sub>這兩個下標，通常有不同進位制的數同時出現，我們就會用下標的方式來明確指出它們分別是用哪個進位制表示。</p>
<p>至於十進制轉二進制則可以用短除法將原本的數不斷除以2，再把餘數反向取出，例如下圖：</p>
<div class="flexeven">
    <img src="https://s3.notfalse.net/wp-content/uploads/2017/02/24034959/dec-to-binary-ex2.png">
</div>

<blockquote><footer><strong>圖片來源：</strong><cite><a href="https://www.google.com/url?sa=i&url=https%3A%2F%2Fnotfalse.net%2F17%2Fpositional-numeral-systems-conversion&psig=AOvVaw19W5Hc8Pags6eSqIucCbh_&ust=1725269735453000&source=images&cd=vfe&opi=89978449&ved=0CBcQjhxqFwoTCLCT3-C4oYgDFQAAAAAdAAAAABAE">NotFalse 技術客</a></cite></footer></blockquote>

<p>所以，二進制的轉換其實就是為了把電腦使用的 <code>1</code> 跟 <code>0</code> 轉換成我們看的懂的數字，以及把我們看得懂的數字轉換成電腦看得懂的形式。</p>
<p>那會這個有什麼用嗎？其實…好像還好，但我們不論在寫程式或是使用軟體時，其實很常會需要用到 <code>1</code> 跟 <code>0</code> 的邏輯，所以還是必須認識他們一下。</p>
<p>底下有個二進制的小遊戲，可以點點看，幫助你更了解二進制！</p>
<h3 id="二進制小遊戲"><a href="#二進制小遊戲" class="headerlink" title="二進制小遊戲"></a>二進制小遊戲</h3><div class="outer-section">
    <div class="flexcon">
        <div class="square">
            <div class="square-inner">
                <button onclick="b1 += 1; disb1();" class="buttonOff" id="bu1">
                </button>
                <p id='b1'></p>
                <p>×</p>
                <p>2<sup>7</sup></p>
                <p>∥</p>
                <p id="s1"></p>
                <script>
                    var b1 = 0;
                    function disb1(){
                        document.getElementById('b1').innerHTML = b1%2;
                        document.getElementById('s1').innerHTML = b1%2*128;
                        if (b1%2 == 0){
                            document.getElementById('bu1').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu1').className = "buttonOn";
                        } summary();
                    }
                    disb1();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b2 += 1; disb2();" class="buttonOff" id="bu2">
                </button>
                <p id='b2'></p>
                <p>×</p>
                <p>2<sup>6</sup></p>
                <p>∥</p>
                <p id="s2"></p>
                <script>
                    var b2 = 0;
                    function disb2(){
                        document.getElementById('b2').innerHTML = b2%2;
                        document.getElementById('s2').innerHTML = b2%2*64;
                        if (b2%2 == 0){
                            document.getElementById('bu2').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu2').className = "buttonOn";
                        } summary();
                    }
                    disb2();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b3 += 1; disb3();" class="buttonOff" id="bu3">
                </button>
                <p id='b3'></p>
                <p>×</p>
                <p>2<sup>5</sup></p>
                <p>∥</p>
                <p id="s3"></p>
                <script>
                    var b3 = 0;
                    function disb3(){
                        document.getElementById('b3').innerHTML = b3%2;
                        document.getElementById('s3').innerHTML = b3%2*32;
                        if (b3%2 == 0){
                            document.getElementById('bu3').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu3').className = "buttonOn";
                        } summary();
                    }
                    disb3();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b4 += 1; disb4();" class="buttonOff" id="bu4">
                </button>
                <p id='b4'></p>
                <p>×</p>
                <p>2<sup>4</sup></p>
                <p>∥</p>
                <p id="s4"></p>
                <script>
                    var b4 = 0;
                    function disb4(){
                        document.getElementById('b4').innerHTML = b4%2;
                        document.getElementById('s4').innerHTML = b4%2*16;
                        if (b4%2 == 0){
                            document.getElementById('bu4').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu4').className = "buttonOn";
                        } summary();
                    }
                    disb4();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b5 += 1; disb5();" class="buttonOff" id="bu5">
                </button>
                <p id='b5'></p>
                <p>×</p>
                <p>2<sup>3</sup></p>
                <p>∥</p>
                <p id="s5"></p>
                <script>
                    var b5 = 0;
                    function disb5(){
                        document.getElementById('b5').innerHTML = b5%2;
                        document.getElementById('s5').innerHTML = b5%2*8;
                        if (b5%2 == 0){
                            document.getElementById('bu5').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu5').className = "buttonOn";
                        } summary();
                    }
                    disb5();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b6 += 1; disb6();" class="buttonOff" id="bu6">
                </button>
                <p id='b6'></p>
                <p>×</p>
                <p>2<sup>2</sup></p>
                <p>∥</p>
                <p id="s6"></p>
                <script>
                    var b6 = 0;
                    function disb6(){
                        document.getElementById('b6').innerHTML = b6%2;
                        document.getElementById('s6').innerHTML = b6%2*4;
                        if (b6%2 == 0){
                            document.getElementById('bu6').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu6').className = "buttonOn";
                        } summary();
                    }
                    disb6();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b7 += 1; disb7();" class="buttonOff" id="bu7">
                </button>
                <p id='b7'></p>
                <p>×</p>
                <p>2<sup>1</sup></p>
                <p>∥</p>
                <p id="s7"></p>
                <script>
                    var b7 = 0;
                    function disb7(){
                        document.getElementById('b7').innerHTML = b7%2;
                        document.getElementById('s7').innerHTML = b7%2*2;
                        if (b7%2 == 0){
                            document.getElementById('bu7').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu7').className = "buttonOn";
                        } summary();
                    }
                    disb7();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b8 += 1; disb8();" class="buttonOff" id="bu8">
                </button>
                <p id='b8'></p>
                <p>×</p>
                <p>2<sup>0</sup></p>
                <p>∥</p>
                <p id="s8"></p>
                <script>
                    var b8 = 0;
                    function disb8(){
                        document.getElementById('b8').innerHTML = b8%2;
                        document.getElementById('s8').innerHTML = b8%2;
                        if (b8%2 == 0){
                            document.getElementById('bu8').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu8').className = "buttonOn";
                        } 
                        summary();
                    }
                    disb8();
                </script>
            </div>
        </div>
        <div class="nondis1">
            <p>(2)</p>
        </div>
    </div>
    <div class="summary">
        <p id="total"></p>
        <script>
            function summary() {
                document.getElementById('total').innerHTML = (b1%2*128)+(b2%2*64)+(b3%2*32)+(b4%2*16)+(b5%2*8)+(b6%2*4)+(b7%2*2)+(b8%2);
            }
            summary();
        </script>
        <div class="nondis">
            <p>(10)</p>
        </div>
    </div>
</div>

<p>前面有提過位元這個詞，簡單來說其實這個小遊戲就代表8位元可以表示的所有數值，範圍是 <code>0 ~ 255</code> ，也就是 2<sup>8</sup> &#x3D; 256 個數。</p>
<blockquote>
<p>n位元可以表示數值範圍為 2<sup>n</sup> 個數，其最大表示數值為 2<sup>n</sup> - 1 。</p>
</blockquote>
<h1 id="十六進制-Hexadecimal"><a href="#十六進制-Hexadecimal" class="headerlink" title="十六進制　Hexadecimal"></a>十六進制　Hexadecimal</h1><hr>
<p>二進制有個顯而易見的問題，就是因為都是 <code>1</code> 跟 <code>0</code> ，所以動不動就要會是一長串沒什麼邏輯的數字，雖然我們不太會需要記憶這些數字，但如果是要表示一些編碼給電腦看，就會很麻煩又難懂。</p>
<p>因此我們會使用十六進制，也就是每數到16就會進位一次，那因為數字只有 <code>0 ~ 9</code> 嘛，所以會再加上 <code>A ~ F</code> ，才能用一個字元完整表示 0 ~ 15 。</p>
<p>至於為什麼是16，而不是12、15之類的呢？前面有提到，我們希望可以增加二進制數值的可讀性。而因為16 &#x3D; 2<sup>4</sup>，因此每4位二進制數字都可以轉換成一個16進制的數字，例如：</p>
<blockquote>
<p>11010010<sub>2</sub> &#x3D; 2<sup>7</sup> + 2<sup>6</sup> + 2<sup>4</sup> + 2<sup>1</sup><br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&ensp;&ensp;&ensp;&ensp; &#x3D; 2<sup>4</sup> × (2<sup>3</sup> + 2<sup>2</sup> + 2<sup>0</sup>) + 2<sup>1</sup><br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&ensp;&ensp;&ensp;&ensp; &#x3D; 16<sup>1</sup> × 13 + 16<sup>0</sup> × 2<br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&ensp;&ensp;&ensp;&ensp; &#x3D; 210<sub>10</sub><br>&ensp;&ensp;&ensp;&ensp;&thinsp;&ensp;&ensp;&ensp;&ensp;&ensp; &#x3D; D2<sub>16</sub></p>
</blockquote>
<p>上面是數學上如何計算，不過我們平常不用想這麼多，直接把二進位數分成每4位一組，直接轉換成十六進位數就可以了，例如：</p>
<blockquote>
<p>&ensp;&ensp;&thinsp;&thinsp;&ensp;&thinsp;<code>100100101011011</code><br>&ensp;可以分成<br>&ensp;&ensp;&thinsp;<code>100</code> <code>1001</code> <code>0101</code> <code>1011</code><br>（要記得整數的話是從最小位數開始取每四位一組）<br>&ensp;&thinsp;<code>0100</code> <code>1001</code> <code>0101</code> <code>1011</code><br>（不足四位的要在最前面補 <code>0</code>）<br>&ensp;&thinsp;<code>(4</code> &ensp;&ensp;&ensp;&thinsp;<code>9</code> &ensp;&ensp;&ensp;&thinsp;<code>5</code> &ensp;&ensp;&ensp;&thinsp;<code>11)</code><sub>10</sub><br>（可以先轉成十進制）</p>
<p>——–&gt; <code>495B</code><sub>16</sub></p>
</blockquote>
<p>以上是整數的轉換方式，那一樣可以直接玩玩看底下的小遊戲，會比較有感！</p>
<h3 id="十六進制小遊戲"><a href="#十六進制小遊戲" class="headerlink" title="十六進制小遊戲"></a>十六進制小遊戲</h3><div class="outer-section">
    <div class="flexcon">
        <div class="square">
            <div class="square-inner">
                <button onclick="b11 += 1; dis1b1();" class="buttonOff" id="bu11">
                </button>
                <p id='b11'></p>
                <script>
                    var b11 = 0;
                    function dis1b1(){
                        document.getElementById('b11').innerHTML = b11%2;
                        if (b11%2 == 0){
                            document.getElementById('bu11').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu11').className = "buttonOn";
                        } summary16();
                    }
                    dis1b1();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b12 += 1; dis1b2();" class="buttonOff" id="bu12">
                </button>
                <p id='b12'></p>
                <script>
                    var b12 = 0;
                    function dis1b2(){
                        document.getElementById('b12').innerHTML = b12%2;
                        if (b12%2 == 0){
                            document.getElementById('bu12').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu12').className = "buttonOn";
                        } summary16();
                    }
                    dis1b2();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b13 += 1; dis1b3();" class="buttonOff" id="bu13">
                </button>
                <p id='b13'></p>
                <script>
                    var b13 = 0;
                    function dis1b3(){
                        document.getElementById('b13').innerHTML = b13%2;
                        if (b13%2 == 0){
                            document.getElementById('bu13').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu13').className = "buttonOn";
                        } summary16();
                    }
                    dis1b3();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b14 += 1; dis1b4();" class="buttonOff" id="bu14">
                </button>
                <p id='b14'></p>
                <script>
                    var b14 = 0;
                    function dis1b4(){
                        document.getElementById('b14').innerHTML = b14%2;
                        if (b14%2 == 0){
                            document.getElementById('bu14').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu14').className = "buttonOn";
                        } summary16();
                    }
                    dis1b4();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b15 += 1; dis1b5();" class="buttonOff" id="bu15">
                </button>
                <p id='b15'></p>
                <script>
                    var b15 = 0;
                    function dis1b5(){
                        document.getElementById('b15').innerHTML = b15%2;
                        if (b15%2 == 0){
                            document.getElementById('bu15').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu15').className = "buttonOn";
                        } summary16();
                    }
                    dis1b5();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b16 += 1; dis1b6();" class="buttonOff" id="bu16">
                </button>
                <p id='b16'></p>
                <script>
                    var b16 = 0;
                    function dis1b6(){
                        document.getElementById('b16').innerHTML = b16%2;
                        if (b16%2 == 0){
                            document.getElementById('bu16').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu16').className = "buttonOn";
                        } summary16();
                    }
                    dis1b6();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b17 += 1; dis1b7();" class="buttonOff" id="bu17">
                </button>
                <p id='b17'></p>
                <script>
                    var b17 = 0;
                    function dis1b7(){
                        document.getElementById('b17').innerHTML = b17%2;
                        if (b17%2 == 0){
                            document.getElementById('bu17').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu17').className = "buttonOn";
                        } summary16();
                    }
                    dis1b7();
                </script>
            </div>
        </div>
        <div class="square">
            <div class="square-inner">
                <button onclick="b18 += 1; dis1b8();" class="buttonOff" id="bu18">
                </button>
                <p id='b18'></p>
                <script>
                    var b18 = 0;
                    function dis1b8(){
                        document.getElementById('b18').innerHTML = b18%2;
                        if (b18%2 == 0){
                            document.getElementById('bu18').className = "buttonOff";
                        }
                        else{
                            document.getElementById('bu18').className = "buttonOn";
                        } 
                        summary16();
                    }
                    dis1b8();
                </script>
            </div>
        </div>
        <div class="nondis">
            <p>(2)</p>
        </div>
    </div>
    <div class="con16">
        <div class="flexeven">
            <div class="inlineflex">
                <p id="sum16a"></p> 
            </div>
            <div class="inlineflex">
                <p id="sum16b"></p>
                <div class="nondis">
                    <p>(16)</p>
                </div>
            </div>
        </div>
    </div>
    <div class="summary">
        <p id="total16"></p>
        <script>
            function summary16() {
                document.getElementById('total16').innerHTML = (b11%2*128)+(b12%2*64)+(b13%2*32)+(b14%2*16)+(b15%2*8)+(b16%2*4)+(b17%2*2)+(b18%2);
                var a = (b11%2*8)+(b12%2*4)+(b13%2*2)+(b14%2);
                a = a.toString(16);
                var b = (b15%2*8)+(b16%2*4)+(b17%2*2)+(b18%2);
                b = b.toString(16)
                document.getElementById('sum16a').innerHTML = a.toUpperCase();
                document.getElementById('sum16b').innerHTML = b.toUpperCase();
            }
            summary16();
        </script>
        <div class="nondis">
            <p>(10)</p>
        </div>
    </div>
</div>

<p>十六進制的表示就很多元了，我們有遇到再說，最好懂的還是下標<sub>16</sub>跟縮寫<em>Hex</em>，那除了十六進制以外其實還有八進制，每一位可以表示3位元的二進制數，不過基本上還是十六進制比較常用一點，所以就不多提八進制了。</p>
<h1 id="十六進制的應用"><a href="#十六進制的應用" class="headerlink" title="十六進制的應用"></a>十六進制的應用</h1><hr>
<p>那我們會在哪些地方用到十六進制呢？簡單來說，電腦最終讀到的通通都是二進制，而十六進制跟二進制之間的轉換比十進制轉二進制方便許多，所以當我們要表示一些給電腦看的編碼時，就經常會使用十六進制的方式來簡化。</p>
<p>第一個很常用到的就是<strong>RGB色碼</strong>了，在網頁設計中我們經常會使用十六進制的色碼來定義顏色。RGB分別就是Red、Green、Blue，每種顏色的值都是用 <code>0 ~ 255</code> ，也就是8位元，兩位十六進制數字來表示。比方說白色的色碼就是 <code>#FFFFFF</code> ，相當於rgb(255,255,255)的意思。</p>
<blockquote><footer><strong>國中理化有教喔！</strong><cite><a href="https://www.ehanlin.com.tw/app/keyword/%E5%9C%8B%E4%B8%AD/%E7%90%86%E5%8C%96/%E5%85%89%E7%9A%84%E4%B8%89%E5%8E%9F%E8%89%B2.html">翰林雲端學院</a></cite></footer></blockquote>

<p>下面我隨便抓幾個色碼展示一下：</p>
<p><span style="background-color: #FFFFFF;color: #696969;">#FFFFFF</span> <span style="background-color: #FF0000;color: #696969;">#FF0000</span> <span style="background-color: #00FF00;color: #696969;">#00FF00</span> <span style="background-color: #0000FF;color: #F5F5F5;">#0000FF</span> <span style="background-color: #4682B4;color: #F5F5F5;">#4682B4</span> <span style="background-color: #ADD8E6;color: #696969;">#ADD8E6</span> <span style="background-color: #98FB98;color: #696969;">#98FB98</span> <span style="background-color: #EE9A00;color: #696969;">#EE9A00</span> <span style="background-color: #FFAEB9;color: #696969;">#FFAEB9</span> <span style="background-color: #FFD700;color: #696969;">#FFD700</span> <span style="background-color: #EE82EE;color: #696969;">#EE82EE</span> <span style="background-color: #FFE4C4;color: #696969;">#FFE4C4</span> <span style="background-color: #4F4F4F;color: #F5F5F5;">#4F4F4F</span> <span style="background-color: #BFEFFF;color: #696969;">#BFEFFF</span> <span style="background-color: #191970;color: #F5F5F5;">#191970</span> <span style="background-color: #000000;color: #F5F5F5;">#000000</span></p>
<p>大概是這種感覺，可以找到自己喜歡的顏色後用色碼表示放在網頁上，也可以參考這些網站：</p>
<blockquote>
<p><a href="http://www.wahart.com.hk/rgb.htm">RGB配色表</a><br><a href="https://www.w3schools.com/colors/colors_rgb.asp">Colors RGB and RGBA</a></p>
</blockquote>
<p>其他會用到十六進制的編碼系統還有：</p>
<blockquote>
<h3 id="ensp-Unicode"><a href="#ensp-Unicode" class="headerlink" title="&ensp;Unicode"></a>&ensp;Unicode</h3><ul>
<li>全世界通用的字元編碼集。</li>
<li>整理、編碼了絕大多數語言的字元。</li>
<li><a href="https://zh.wikipedia.org/zh-tw/Unicode%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8">Unicode字元列表</a></li>
</ul>
</blockquote>
<blockquote>
<h3 id="ensp-IPv6"><a href="#ensp-IPv6" class="headerlink" title="&ensp;IPv6"></a>&ensp;IPv6</h3><ul>
<li>網際網路位址協定的最新版本。</li>
<li>取代IPv4，解決位址枯竭的問題。</li>
<li>128位元的位址，以共8組的4位十六進制表示，共有2<sup>128</sup>或16<sup>32</sup>個不同的位址。</li>
<li><a href="https://zh.wikipedia.org/zh-tw/IPv6">IPv6-Wikipedia</a></li>
</ul>
</blockquote>
<blockquote>
<h3 id="ensp-MAC位址-Media-Access-Control-Address"><a href="#ensp-MAC位址-Media-Access-Control-Address" class="headerlink" title="&ensp;MAC位址 Media Access Control Address"></a>&ensp;MAC位址 Media Access Control Address</h3><ul>
<li>跟IP位址不同，MAC更偏向網路裝置在現實之中的門牌號碼。</li>
<li>每個裝置在出廠時就指定好不重複的MAC位址，通常不可更動。</li>
<li><a href="https://zh.wikipedia.org/zh-tw/MAC%E5%9C%B0%E5%9D%80">MAC位址-Wikipedia</a></li>
</ul>
</blockquote>
<p>這邊稍微舉幾個例子淺提一下，之後可能會再深入談一點，有興趣的話也可以自行Google，或是問ChatGPT，我還滿喜歡用GPT找關鍵字的，通常都會給出不錯的答案，再拿來深入問GPT或是去搜尋相關文章，都很好用。</p>
<hr>
<p>那第一課差不多就到這邊啦，一不小心寫了滿長，之後的課應該也會是這種文字配上一點點互動的形式，因為互動的部分需要設計一下，所以還是會花點時間，希望有幫助。</p>
<p>那今天就到這邊啦！我們下堂課見！</p>
]]></content>
      <categories>
        <category>articles</category>
      </categories>
      <tags>
        <tag>初學者系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基本操作分享</title>
    <url>/2024/08/29/hexobasic/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">參考文章</a></p>
</blockquote>
<p>看到Hexo一陣子了，我一直都想自己架個站，但都懶得動，這次實習完終於喚醒我長年睡著的Coding魂（其實也是終於有機會跟上新時代的工具了），剛好也有時間就來搞搞看，結果發現其實真的滿簡單的，也滿好用。</p>
<h1 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h1><hr>
<p>開玩笑的，我最不會解釋這種東西了，基本上就是個寫網誌的框架啦！</p>
<blockquote>
<p><a href="https://hexo.io/zh-tw/">官網連結</a></p>
</blockquote>
<p>其實官網就有完整（？）教學了，架起來真的很簡單，我第一次用遇到的問題比較都是不熟悉現代工具（node.js, git）造成的，每個人應該都有不太會打Terminal的時代吧…還是單純我笨QQ</p>
<h1 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h1><hr>
<p>反正官網其實開頭就告訴你需要什麼指令了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>好吧，既然我的初衷是要手把手教學，這裡就講仔細點，順便讓我練一下Markdown。</p>
<p>首先最基礎的是，看到 <code>npm</code> 的時候就要有意識了，基本上這個時代寫程式最容易看到卻也最容易讓小白卡住的兩個詞就是 <code>npm</code> 或 <code>pip</code> 。簡單來說他們有點像兩種下載器， <code>npm</code> 是node.js預設的，<code>pip</code> 則是Python預設的，你的電腦要先裝好對應的環境，才可以在Terminal上使用這些指令。</p>
<blockquote>
<p><a href="https://nodejs.org/zh-tw">node.js官網</a></p>
</blockquote>
<p>因此這裡第一件要做的事就是把node裝好，裝好之後大概就會產生下一個疑問了：</p>
<h3 id="我要在哪裏打剛剛的指令…"><a href="#我要在哪裏打剛剛的指令…" class="headerlink" title="我要在哪裏打剛剛的指令…"></a>我要在哪裏打剛剛的指令…</h3><p>剛剛有提過Terminal了，我一直覺得這東西的存在就是為了阻止程式小白開始寫程式，因為真的太基本了所以基本上沒什麼人會教…至於我為什麼一直覺得這是新世代的方法，主要是因為以前就是學一些上古時代的東西，包括但不限於C++, PHP, JAVA等語言，又因為都在學校學，真的是比較少碰現在這些框架，甚至是比較大的框架大部分不一定需要用這種Package的方式安裝（其實我直覺也舉不出例子，但還真就剛好沒人教過我怎麼用npm），於是後來我就一直對這個很困惑（說白了就是懶的接觸新東西啦）。</p>
<p>最近又回來比較密集的碰這些東西才重新理解，那就來詳細說一下我理解的內容吧，簡單來說Terminal其實就是電腦上可以輸入指令的地方，以Windows來說比較常用的就是<strong>cmd（Command Line, 命令提示字元）</strong>，在開始輸入cmd就會直接跳出來；另外還有<strong>PowerShell</strong>，基本上把他當強化版的cmd就對了，功能比cmd完整，但整體使用上差不多。</p>
<p>不過我自己現在最常用的是<a href="https://code.visualstudio.com/"><strong>VS Code（Visual Studio Code）</strong></a>內建的Terminal啦，高中有在寫程式的時候大家對VS Code的評價好像都不是很好，我記得那時候還很多人是用Sublime Text去裝C++插件來寫。但時代變了，現在整個生態系越來越完整，VS Code變好用很多（其實我好像一直都沒覺得它難用就是了），重點是我覺得變漂亮很多，畢竟寫Code整天只能盯著這個畫面，好看還是很重要的。</p>
<p>回到重點，大部分的IDE（Integrated Development Environment, 整合開發環境）其實應該都有內建的Termanal，畢竟現在的框架很多都需要指令來配合使用，打一打還要切出去挺麻煩的，這時候內建的Terminal就很方便，加上VS Code本身就是微軟開發的，在Windows環境的支援性應該還是比較好（我也沒有比較過就是了）。</p>
<p>至於用Mac的朋友我只能說聲抱歉，我真的沒有用過，這就要靠你們自己摸索了。</p>
<p>另一個要安裝的環境則是<a href="https://git-scm.com/"><strong>git</strong></a>，雖然對於Hexo來說不是必要的，但是如果要發佈到Github Page或是安裝插件都會用到，所以如果電腦裡還沒有也可以先裝起來。</p>
<p>再回到剛剛的指令，我們一行一行來看好了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>首先又有一個大重點，我覺得這也是要阻止外行人學程式的陰謀…可以看到一開始有個 <code>$</code> 符號，基本上我相信99%的人第一次看到就會整行複製，然後Windows就會吐一句話給你：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;$&#x27;</span> 不是內部或外部命令、可執行的程式或批次檔。</span><br></pre></td></tr></table></figure>
<p>是的，其實很簡單的問題，那個 <code>$</code> 不是要你複製貼上的，以我目前的理解，它比較像是在告訴你這行是一個指令，可以打在Terminal上執行，不過實際上好像會因為作業系統而不同（這部分我是問ChatGPT，我也不確定，手邊有Linux系統的可以自己試試看），反正Linux&#x2F;Unix中輸入的話， <code>$</code> 應該是可打可不打，但Windows是直接不收，所以如果是純粹針對Windows的教學其實有些就會不加 <code>$</code> ，例如這樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>不過我還是必須說，我覺得指令滿多時候會因為每台電腦環境、版本的些微不同而出一些奇怪的Bug，所以遇到問題還是要多google，基本上能過最重要，不用因為自己的指令跟別人不同感到難過（？），我其實不太確定這是什麼問題就是了，但我印象中確實有遇過這樣的情況，很怪。</p>
<p>那這個指令就是安裝啦，<code>install</code> 應該都看得懂吧，執行完就會在你所在的目錄安裝好Hexo啦，其實釐清這個邏輯以後就會發現這很方便，反正指令google就有，也不太需要記。</p>
<p>那下一個指令就是Hexo自己的指令了，這邊做的是初始化Hexo，執行後會在所在的目錄建立一個資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder name&gt;</span><br></pre></td></tr></table></figure>
<p><code>&lt;folder name&gt;</code> 記得改成自己要的名稱，也可以先建好資料夾並在該資料夾輸入上面的指令，同樣可以完成初始化。</p>
<p>下個指令很重要，很常用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder name&gt;</span><br></pre></td></tr></table></figure>
<p><code>cd</code> 是個很常用的指令，基本上就是 <code>change directory</code> 的意思，也就是把執行指令的目錄變更到目標目錄去，對，這裡補充一下，基本上執行指令的對象都是對某個目錄，所以以這邊的情境來說，就是我剛建立了一個新的資料夾，現在我要對這個資料夾做一些變更或執行一些東西，所以我要把執行的目錄變更為新的資料夾。上一步如果要先建立資料夾，就是建立好之後 <code>cd</code> 到新的資料夾裡面，所以其實兩個做法真的是差不多的意思啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其實也可以打開資料夾之後在檔案總管的路徑那邊直接輸入cmd，跟 <code>cd</code> 指令是一樣的意思。</p>
</blockquote>
<p>這邊就是在新資料夾把需要的Package重新安裝一次，沒問題的話會看到這些檔案跟資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>基本上這邊就差不多了，輸入最後一個指令就可以在本地端發布靜態網頁，可以看到網頁的最初模樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>就可以點Terminal上的<a href="http://localhost:4000/">連結</a>來看到自己發布的網頁了。</p>
<h1 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置"></a>基本設置</h1><hr>
<p>如果你照著上面的步驟走完一遍，應該會發現我的網頁跟你的長不一樣吧！其實Hexo官網上提供了很多的<a href="https://hexo.io/themes/">主題（Themes）</a>，可以去挑自己喜歡的來用，我目前用的這個是<a href="https://github.com/zoeingwingkei/frame/tree/master">Frame</a>，其實算是歪打正著找到一個滿漂亮功能又滿多的，大家也可以自己探索，基本上官網都有Demo網頁（不過有些網域沒有維護被連結到其他地方去了，請大家瀏覽的時候自行注意安全），可以慢慢尋找自己最喜歡的主題，因為每個主題的設置會不太一樣，所以如果是用了一陣子之後才換可能會稍微有點麻煩，大家就自己研究看看囉！</p>
<p>那這裡先從Hexo的基本設置開始說起，不過我不會講太仔細，網路上有很多教學講得很詳細，這部分我也還沒研究清楚就不班門弄斧了。</p>
<p>這邊指的基本設置是在剛剛建立的新資料夾中，有一個 <code>_config.yml</code> 的檔案，可以用記事本打開或是直接拉到VS Code裡開啟，打開之後可以看到滿多設定可以更改，這裡講幾個比較基本的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Roy&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;我的網路與程式開發筆記&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Roy</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>應該算容易理解，<code>title</code> 就是網站標題，也就是顯示在分頁上的字，<code>description</code> 則是對網頁的描述，通常是給搜尋引擎看的啦，以下這幾個差不多都是這個意思，看個人需要再編輯即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br></pre></td></tr></table></figure>
<p>這邊比較重要，這邊是決定產生的靜態檔案會跑去哪，也會決定它們的相對路徑，所以如果有找不到頁面的情況，可能是其他地方的設定跟這裡不同造成的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">frame</span></span><br></pre></td></tr></table></figure>
<p>這裡則是設置使用的主題，上面還很貼心的提供了官網連結，可以瀏覽所有的主題以及插件，之後 <code>git clone</code> 到對應的資料夾使用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;Your</span> <span class="string">Github</span> <span class="string">Page</span> <span class="string">Link&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>另外先提一下，如果有要發佈到Github Page上，需要在這裡先設定自己的Github Repository連結，才可以順利發佈上去，這個我之後會再詳細講一遍，我們先看看其他設定吧。</p>
<hr>
<p>接下來講講<strong>主題</strong>相關的設置吧，基本上每個主題的設置都會不太一樣，所以我講比較通用的概念為主，先講個先備知識，如果你不太了解相對路徑如何運作，請先去google複習一下，我就不贅述了。</p>
<p>主題的設置會在 <code>themes</code> 資料夾裡，該主題的資料夾中會有另一個 <code>_config.yml</code> 檔案，一樣開啟它之後就會看到該主題對應的設置，基本上每個主題Github上的 <code>README.md</code> 會有自己的說明，都講得滿清楚的。</p>
<p>先岔開一下好了，對於比較少用這種類型框架的人來說可能會遇到跟我一樣的問題，或著單純我傻QQ，在我以前的認知裡，尤其對於靜態網頁，我直覺就是找 <code>public</code> 資料夾，因為通常就是這樣叫的嘛，所以我就拿裡面的東西改改改，然後照著教學打指令之後就發現我改的東西不見了…</p>
<p>其實仔細想想真的滿笨的。因為Hexo是靜態的網頁框架，所以每次更改之後都要重新產生靜態網頁，需要輸入以下兩個指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo cl</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>就是把原本的靜態網頁刪除，然後產生新的，就這麼簡單而已，但相對來說在 <code>public</code>裡面改的東西就會消失，<strong>所以不論改什麼，都不要在 <code>public</code> 資料夾底下改</strong>，除非你確定你再也不會用Hexo本身的功能生成靜態網頁，否則改任何圖示都要在 <code>/themes/source</code> 底下去改檔案，如果要改網頁的Layout則是要到 <code>themes/layout</code> 底下去改 <code>.ejs</code> 檔， <code>.ejs</code> 的具體操作我就不明白了，大家有興趣可以自行研究。然後再用 <code>$ hexo g</code> 根據 <code>themes</code> 裡面的檔案去生成靜態網頁，這時候才會用裡面的圖檔、文件去生成新的靜態網頁到 <code>public</code> 裡面。</p>
<p>所以說這邊比較通用且好更改的東西就是網頁上顯示的圖示了，第一個是 <code>favicon.ico</code> ，可以在 <code>/themes/source</code> 裡面找到它，它就是我們平常在分頁標籤最左邊可以看到的那個圖示。想要自己動手做的話可以到<a href="https://favicon.io/"><strong>favicon.io</strong></a>，或是用<a href="https://www.figma.com/"><strong>figma</strong></a>輸出 <code>.png</code> 檔再轉成 <code>.ico</code> 檔，之後丟到 <code>/themes/source</code> 就可以了。</p>
<p>網頁內的Icon也是用一樣的方式操作，我比較建議的方式也是用Figma輸出 <code>.png</code> 檔，Figma真的很推，簡單好用漂亮，但如果你有其他用得順手的工具當然也OK。</p>
<p>另外再介紹一個好用的插件，<a href="https://github.com/next-theme/hexo-generator-searchdb"><strong>hexo-generator-searchdb</strong></a>是一款本地搜尋插件，我不確定它能不能跟其他主題完全相容，但Frame有<a href="https://zoeingwingkei.github.io/frame-demo-site/2022/08/05/local-search/">完整支援</a>，非常簡單就能設置完成，我覺得我還是滿需要搜尋功能的，不然寫多了都不記得自己寫過啥XD</p>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;layout&gt; &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>這邊就是建立新的頁面，Layout可選的有三種：</p>
<table>
<thead>
<tr>
<th align="left">Layout</th>
<th align="left">path</th>
<th align="left">defnition</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>post</code></td>
<td align="left"><code>source/_post</code></td>
<td align="left">文章</td>
</tr>
<tr>
<td align="left"><code>page</code></td>
<td align="left"><code>source</code></td>
<td align="left">頁面</td>
</tr>
<tr>
<td align="left"><code>draft</code></td>
<td align="left"><code>source/_drafts</code></td>
<td align="left">草稿</td>
</tr>
</tbody></table>
<p>基本上 <code>post</code> 跟 <code>draft</code> 是差不多的東西，單純就是產生在不同的目錄底下而已； <code>page</code> 就比較不一樣，它是直接建立一個頁面，就有很多可以玩的了，我暫時還沒研究。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>清除快取與已產生的靜態檔案，建議每次儲存修改完的檔案都可以先執行這個。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>就是生成靜態檔案，所以先用 <code>clean</code> 清除再重新生成一次，就這樣。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>這個剛剛有講過了，在本地端啟動Hexo server，就可以在自己電腦上預覽結果，要關掉的話回到Terminal點一下之後按 <code>Ctrl+C</code> 就可以了。</p>
<h1 id="發佈到Github-Page"><a href="#發佈到Github-Page" class="headerlink" title="發佈到Github Page"></a>發佈到Github Page</h1><hr>
<p>這邊…真的滿簡單的，所以我就不多寫了，可以參考其他人的文章，以下附上兩篇：</p>
<blockquote>
<p><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">Github Page</a></p>
</blockquote>
<blockquote>
<p><a href="https://medium.com/i-caught-a-code/hexo-%E7%84%A1%E7%97%9B%E5%85%A5%E5%9D%91%E5%9B%89-1a119a6805e5">Gitlab + Netlify</a></p>
</blockquote>
<p>設定好之後就是在每次修改完依序執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo cl</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>這三行指令就是前面 <code>clean</code> 跟 <code>generate</code> 的縮寫，再加上一個 <code>deploy</code> 。</p>
<p>基本上這樣就可以開始玩啦！底下再附上幾個連結給大家參考：</p>
<p>Markdown語法相關：</p>
<blockquote>
<p><a href="https://kingofamani.gitbooks.io/git-teach/content/chapter_6_gitbook/markdown.html">MD語法教學</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/zh-tw/docs/tag-plugins">Hexo提供的Tag Plugins</a></p>
</blockquote>
<p>要注意的是Tag Plugins雖然用起來滿方便的，但在VS Code預覽時不會正常顯示，算是小麻煩的點。</p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><hr>
<p>其實我也才剛開始玩Hexo而已，這篇主要就是一些基本介紹，如果之後有玩出其他東西再來跟大家分享。Hexo真的算是滿簡單好用，滿推薦大家自己弄起來玩玩看的，而且因為是自己架的，相對來說在上面寫東西負擔也比較小，算是慢慢建立個人網站的起步好幫手。那如果有摸出新東西再來跟大家分享啦，之後幾篇應該會先寫原本預計寫的東西，過一陣子再回來研究Hexo，就這樣囉！</p>
]]></content>
      <categories>
        <category>articles</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tag/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
